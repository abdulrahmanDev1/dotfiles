---
- name: Machine setup by D7OM
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"
    brew_packages:
      - lazygit
      - eza
      - trash-cli
      - tldr
      - thefuck
      - python
      - pipx
      - bat
      - zsh-syntax-highlighting
      - gum
      - watchman
      - golang
      - figlet
    install_homebrew_if_missing: true
    upgrade_homebrew_packages: true

  tasks:

    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install required packages for Arch (pacman)
      community.general.pacman:
        name:
          - git
          - btop
          - neovim
          - firefox
          - gnome-tweaks
          - ripgrep
          - zsh
          - fzf
          - tmux
          - kitty
          - openssl
          - gdbm
          - libnsl
          - luarocks
          - wl-clipboard
          - fd
          - base-devel
          - autoconf
          - docker
          - docker-compose
        state: present

    - name: Install Homebrew dependencies for Arch (pacman)
      community.general.pacman:
        name:
          - git
          - base-devel
          - gcc
          - openssl
          - procps
          - curl
        state: present

    - name: Check if Homebrew is already installed
      ansible.builtin.stat:
        path: /home/linuxbrew/.linuxbrew/bin/brew
      register: homebrew_exists

    - name: Install Homebrew on Arch Linux
      ansible.builtin.shell: |
        echo | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      when: homebrew_exists.stat.exists == false

    - name: Add Homebrew to PATH
      ansible.builtin.shell: |
        echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/{{ remote_regular_user }}/.profile
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      when: homebrew_exists.stat.exists == false
      become: false

    - name: Upgrade Homebrew packages
      ansible.builtin.command: /home/linuxbrew/.linuxbrew/bin/brew upgrade
      become: false 
      when: homebrew_exists.stat.exists == true and upgrade_homebrew_packages == true

    - name: Install packages via Homebrew
      community.general.homebrew:
        name: "{{ item }}"
        state: present
      loop: "{{ brew_packages }}"
      become: false 
      when: homebrew_exists.stat.exists == true

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true

    - name: Ensure fonts directory exists
      ansible.builtin.file:
        path: "/home/{{ remote_regular_user }}/.fonts"
        state: directory
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if JetBrains Mono font exists
      ansible.builtin.shell: "ls /home/{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
      register: jetbrains_mono_exists
      ignore_errors: true
      changed_when: false

    - name: Download JetBrains Mono font if missing
      when: jetbrains_mono_exists is failed
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
        dest: "/home/{{ remote_regular_user }}/.fonts/"
        remote_src: true
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if ~/.config/nvim exists
      stat:
        path: "/home/{{ remote_regular_user }}/.config/nvim"
      register: nvim_config_check

    - name: Ask if the user wants to install D7OM's Neovim config
      pause:
        prompt: "Do you want to install D7OM's Neovim config? (yes/no)"
      register: confirm_install
      when: nvim_config_check.stat.exists

    - name: Backup existing nvim config if confirmed
      command: mv "/home/{{ remote_regular_user }}/.config/nvim" "/home/{{ remote_regular_user }}/.config/nvim.bak"
      when:
        - nvim_config_check.stat.exists
        - confirm_install.user_input == "yes"

    - name: Clone Neovim config from GitHub
      git:
        repo: "https://github.com/abdulrahmanDev1/nvim.git"
        dest: "/home/{{ remote_regular_user }}/.config/nvim"
        clone: yes
        update: yes
      when:
        - nvim_config_check.stat.exists == false
        - confirm_install is undefined or confirm_install.user_input == "yes"
