---
- name: Machine setup by D7OM
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  vars:
    flyctl_version: "0.1.130"
    pulumi_version: "v3.94.2"
    brew_packages:
      - lazygit
      - eza
      - trash-cli
      - tldr
      - thefuck
      - python
      - pipx
      - bat
      - zsh-syntax-highlighting
      - gum
      - watchman
      - golang
    install_homebrew_if_missing: true
    upgrade_homebrew_packages: true
  pre_tasks:
    - name: Ensuring Homebrew Is Installed
      stat:
        path: /home/linuxbrew/.linuxbrew/bin/brew
      register: homebrew_check

    - name: Fail If Homebrew Is Not Installed and install_homebrew_if_missing Is False
      fail:
        msg: Homebrew is missing...Install from http://brew.sh/
      when:
        - not homebrew_check.stat.exists
        - not install_homebrew_if_missing

    - name: Installing Homebrew
      shell: /usr/bin/bash -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      when:
        - not homebrew_check.stat.exists
        - install_homebrew_if_missing

  tasks:
    - name: Updating Homebrew
      homebrew:
        update_homebrew: true
      become: yes
      become_user: "{{ ansible_env.SUDO_USER }}"
      when: homebrew_check.stat.exists

    - name: Installing Homebrew Packages
      homebrew:
        name: "{{ brew_packages }}"
        state: present
      become: yes
      become_user: "{{ ansible_env.SUDO_USER }}"
      register: result
      until: result is successful
      when: homebrew_check.stat.exists

    - name: Upgrading Homebrew Packages
      homebrew:
        upgrade_all: "{{ upgrade_homebrew_packages }}"
      register: result
      until: result is successful
      become: no
      when: homebrew_check.stat.exists

    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - name: Install packages
      ansible.builtin.dnf:
        name:
          - git
          - btop
          - neovim
          - firefox
          - gh
          - gnome-tweaks
          - ripgrep
          - zsh
          - fzf
          - tmux
          - kitty
          - openssl-devel
          - gdbm-libs
          - libnsl2
          - luarocks
          - wl-clipboard
          - fd-find
          - "@Development Tools"
          - autoconf
        state: present

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Install DNF plugins core
      ansible.builtin.dnf:
        name: dnf-plugins-core
        state: present

    - name: Add Brave Browser Repo
      ansible.builtin.yum_repository:
        name: brave-browser
        description: Brave Browser
        baseurl: https://brave-browser-rpm-release.s3.brave.com/x86_64/
        gpgkey: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
        gpgcheck: true
        enabled: true

    - name: Import Brave Browser GPG Key
      ansible.builtin.rpm_key:
        key: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
        state: present

    - name: Install Brave Browser
      ansible.builtin.dnf:
        name: brave-browser
        state: present

    - name: Import Microsoft GPG Key
      ansible.builtin.rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Visual Studio Code Repo
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc
        gpgcheck: true
        enabled: true

    - name: Install VS Code
      ansible.builtin.dnf:
        name: code
        state: present

    - name: Add Docker repo
      ansible.builtin.yum_repository:
        name: docker
        description: Docker repo
        baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/stable"
        gpgkey: "https://download.docker.com/linux/fedora/gpg"
        gpgcheck: true
        enabled: true

    - name: Install Docker
      ansible.builtin.dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        groups: docker
        append: true

    - name: Install Flatpak packages
      community.general.flatpak:
        name:
          - com.obsproject.Studio
          - org.videolan.VLC
          - org.tenacityaudio.Tenacity
          - md.obsidian.Obsidian
          - org.gimp.GIMP
          - org.gnome.meld
          - org.sqlitebrowser.sqlitebrowser
          - us.zoom.Zoom
          - org.gnome.World.PikaBackup
          - com.mattjakeman.ExtensionManager
          - org.freedesktop.Platform/x86_64/23.08
          - nl.hjdskes.gcolor3
        state: present

    - name: Ensure fonts directory
      ansible.builtin.file:
        path: "~{{ remote_regular_user }}/.fonts"
        state: directory
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if Jetbrains Mono exists
      ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
      register: jetbrains_mono_exists
      ignore_errors: true
      changed_when: false

    - name: Download Jetbrains mono
      when: jetbrains_mono_exists is failed
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
        dest: "~{{ remote_regular_user }}/.fonts/"
        remote_src: true
        mode: "0755"
        owner: "{{ remote_regular_user }}"

    - name: Check if ~/.config/nvim exists
      stat:
        path: "~{{ remote_regular_user }}/.config/nvim"
      register: nvim_config_check

    - name: Backup existing nvim config
      command: mv "~{{ remote_regular_user }}/.config/nvim" "~{{ remote_regular_user }}/.config/nvim.bak"
      when: nvim_config_check.stat.exists

    - name: Clone nvim config from GitHub
      git:
        repo: "https://github.com/abdulrahmanDev1/nvim.git"
        dest: "~{{ remote_regular_user }}/.config/nvim"
        clone: yes
        update: yes

    # TODO fix the problems with pipx
    # - name: Check if pipx is installed
    #   command: which pipx
    #   register: pipx_check
    #   ignore_errors: true
    #
    # - name: Install pipx
    #   command: python3 -m pip install --user pipx
    #   when: pipx_check.rc != 0
    #
    # - name: Install please-cli for Todo list -> Alias "todo"
    #   shell: pipx install please-cli
    - name: Setup Complete
      command: cat ../.finished
      register: finished

    - debug: var=finished.stdout_lines
